version: '3.8'

x-spark-common: &spark-common
  image: bitnami/spark:3.4.0
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
    - ./data:/opt/bitnami/spark/data

x-airflow-common: &airflow-common
  build: .
  env_file:
    - airflow.env
    - .env
  environment:
    MONGODB_URI: ${MONGODB_URI}
  volumes:
    - ./jobs:/opt/airflow/jobs
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./data:/opt/airflow/data
    - airflow-db-data:/var/lib/postgresql/data

services:
  spark-master:
    <<: *spark-common
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    networks:
      - airflow-network

  spark-worker:
    <<: *spark-common
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 4
      SPARK_WORKER_MEMORY: 4g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - airflow-network
  spark-notebook:
      build:
        context: ./docker/notebooks
        dockerfile: Dockerfile
      container_name: "spark-notebook"
      user: root
      environment:
        - JUPYTER_ENABLE_LAB="yes"
        - GRANT_SUDO="yes"
      volumes:
        - ./notebooks/work:/home/jovyan/work
      ports:
        - "8888:8888"
        - "4040:4040"
      networks:
        - airflow-network

  postgres:
    image: postgres:14.0
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db:/var/lib/postgresql/data
    networks:
      - airflow-network

  webserver:
    container_name: webserver
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      - scheduler
      - postgres
    networks:
      - airflow-network

  scheduler:
    container_name: scheduler
    <<: *airflow-common
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Yusuf --lastname Ganiyu --role Admin --email airscholar@gmail.com --password admin && airflow scheduler"
    networks:
      - airflow-network

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio-data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow-network

  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - ./qdrant_data:/qdrant/storage
    environment:
      QDRANT_LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD-SHELL", "bash -c ':> /dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - airflow-network

  # mongo:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.mongo
  #   container_name: mongo
  #   restart: always
  #   ports:
  #     - "27017:27017"   # Exposing MongoDB on port 27017
  #   volumes:
  #     - mongo-data:/data/db
  #   networks:
  #     - airflow-network
################################################################
##             KAFKA CLUSTER                                  ##                     
##                                                            ##
################################################################
  # zookeeper:
  #   container_name: zookeeper
  #   image: confluentinc/cp-zookeeper:5.2.1
  #   ports:
  #     - '31000:31000'
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #     KAFKA_JMX_HOSTNAME: "localhost"
  #     KAFKA_JMX_PORT: 31000
  #   networks:
  #     - airflow-network


  # kafka:
  #   # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
  #   # An important note about accessing Kafka from clients on other machines: 
  #   # -----------------------------------------------------------------------
  #   #
  #   # The config used here exposes port 9092 for _external_ connections to the broker
  #   # i.e. those from _outside_ the docker network. This could be from the host machine
  #   # running docker, or maybe further afield if you've got a more complicated setup. 
  #   # If the latter is true, you will need to change the value 'localhost' in 
  #   # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those 
  #   # remote clients
  #   #
  #   # For connections _internal_ to the docker network, such as from other services
  #   # and components, use kafka:29092.
  #   #
  #   # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
  #   # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
  #   #  
  #   image: confluentinc/cp-enterprise-kafka:5.2.1
  #   container_name: kafka
  #   ports:
  #     - '9092:9092'
  #     - '31001:31001'
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
  #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
  #     CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
  #     CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #     CONFLUENT_METRICS_ENABLE: 'false'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  #     KAFKA_JMX_HOSTNAME: "localhost"
  #     KAFKA_JMX_PORT: 31001
  #   networks:
  #     - airflow-network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:5.2.1
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   ports:
  #     - '8081:8081'
  #     - '31002:31002'
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
  #     SCHEMA_REGISTRY_JMX_HOSTNAME: "localhost"
  #     SCHEMA_REGISTRY_JMX_PORT: 31002
  #   networks:
  #     - airflow-network

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:5.2.1
  #   container_name: control-center
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - schema-registry
  #     # - kafka-connect-pluto-01
  #     # - kafka-connect-pluto-02
  #     # - kafka-connect-mercury-01
  #     # - kafka-connect-mercury-02
  #     # - ksql-server-asgard-01
  #     # - ksql-server-asgard-02
  #     # - ksql-server-vanaheimr-01
  #     # - ksql-server-vanaheimr-02
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
  #     CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     # Multiple connect clusters here
  #     CONTROL_CENTER_CONNECT_PLUTO_CLUSTER: 'http://kafka-connect-pluto-01:8083'
  #     # CONTROL_CENTER_CONNECT_MERCURY_CLUSTER: 'http://kafka-connect-mercury-01:8083'
  #     # Multiple KSQL clusters here
  #     CONTROL_CENTER_KSQL_ASGARD_URL: "http://ksql-server-asgard-01:8088,http://ksql-server-asgard-02:8088"
  #     # The advertised URL needs to be the URL on which the browser can access the KSQL server (e.g. http://localhost:8088/info)
  #     CONTROL_CENTER_KSQL_ASGARD_ADVERTISED_URL: "http://localhost:8088,http://localhost:18088"
  #     # CONTROL_CENTER_KSQL_VANAHEIMR_URL: "http://ksql-server-vanaheimr-01:8088"
  #     # # The advertised URL needs to be the URL on which the browser can access the KSQL server (e.g. http://localhost:8088/info)
  #     # CONTROL_CENTER_KSQL_VANAHEIMR_ADVERTISED_URL: "http://localhost:28088"
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021
  #   command:
  #     - bash
  #     - -c
  #     - |
  #       echo "Waiting two minutes for Kafka brokers to start and
  #              necessary topics to be available"
  #       sleep 120
  #       /etc/confluent/docker/run
  #   networks:
  #     - airflow-network
  

volumes:
  postgres-db:
  airflow-db-data:
  mongo-data:
  minio-data:

networks:
  airflow-network:
    driver: bridge